{"version":3,"sources":["assets/logo.png","components/Header/Header.js","services/api.js","pages/Home/Home.js","pages/Home/HomeContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","id","className","src","require","alt","api","axios","create","baseURL","Home","_ref","planet","name","population","climate","terrain","films","bgSlider","HomeContainer","state","planets","page","randomBgSlider","home","Math","floor","random","length","box","document","querySelector","setAttribute","concat","errorAlert","err","_this","setState","console","log","style","backgroundColor","NProgress","done","randomPage","_callee","response","pages","regenerator_default","wrap","_context","prev","next","get","sent","data","loadPlanets","t0","stop","_callee2","_context2","docs","randomPlanet","this","start","addEventListener","pages_Home_Home","Component","App","components_Header_Header","HomeContainer_HomeContainer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","getElementById","URL","process","href","origin","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.466eb283.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d100186.png\";","import React from 'react'\r\n\r\nimport './styles.css'\r\n\r\nconst Header = () => (\r\n  <header id='main-header'><img className='logo' src={require('../../assets/logo.png')} alt='Star Wars' /></header>\r\n)\r\n\r\nexport default Header\r\n","import axios from 'axios'\r\n\r\nconst api = axios.create({ baseURL: 'http://localhost:3001/v1' })\r\n\r\nexport default api\r\n","import React from 'react'\r\n\r\nimport './styles.css'\r\n\r\nconst Home = ({ planet }) => (\r\n  <div className='container'>\r\n    <div className='box'>\r\n      <h3>{planet ? planet.name : 'Error'}</h3>\r\n      <div className='content'>\r\n        <p>Population: {planet ? planet.population : 'nobody'}</p>\r\n        <p>Climate: {planet ? planet.climate : 'bad'}</p>\r\n        <p>Terrain: {planet ? planet.terrain : 'poor'}</p>\r\n      </div>\r\n      <p>Featured in {planet ? planet.films : '0'} films</p>\r\n    </div>\r\n    <button className='next' >NEXT</button>\r\n  </div>\r\n)\r\n\r\nexport default Home\r\n","import React, { Component } from 'react'\r\nimport NProgress from 'nprogress'\r\n\r\nimport api from '../../services/api'\r\n\r\nimport Home from './Home'\r\n\r\nconst bgSlider = [\r\n  [\r\n    '1.jpg) no-repeat center',\r\n    '2.jpg) no-repeat center',\r\n    '3.jpg) no-repeat bottom',\r\n    '4.jpg) no-repeat center'\r\n  ],\r\n  [\r\n    '3.jpg) no-repeat bottom',\r\n    '4.jpg) no-repeat center',\r\n    '5.jpg) no-repeat left'\r\n  ],\r\n  [\r\n    '2.jpg) no-repeat center',\r\n    '3.jpg) no-repeat bottom',\r\n    '6.jpg) no-repeat center'\r\n  ],\r\n  [\r\n    '2.jpg) no-repeat center',\r\n    '3.jpg) no-repeat bottom',\r\n    '6.jpg) no-repeat center'\r\n  ],\r\n  [\r\n    '2.jpg) no-repeat center',\r\n    '4.jpg) no-repeat center',\r\n    '5.jpg) no-repeat left',\r\n    '6.jpg) no-repeat center'\r\n  ],\r\n  [\r\n    '1.jpg) no-repeat center',\r\n    '2.jpg) no-repeat center',\r\n    '4.jpg) no-repeat center'\r\n  ]\r\n]\r\n\r\nexport default class HomeContainer extends Component {\r\n  state = {\r\n    planets: [],\r\n    planet: {},\r\n    page: 1\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.randomBgSlider()\r\n    NProgress.start()\r\n    this.randomPage()\r\n\r\n    document.querySelector('.next').addEventListener('click', this.randomBgSlider)\r\n    document.querySelector('.next').addEventListener('click', NProgress.start)\r\n    document.querySelector('.next').addEventListener('click', this.randomPage)\r\n  }\r\n\r\n  randomBgSlider = () => {\r\n    const home = Math.floor(Math.random() * bgSlider.length)\r\n\r\n    const box = Math.floor(Math.random() * bgSlider[home].length)\r\n\r\n    document.querySelector('.container').setAttribute('style', `background: url(../../assets/background-home-0${home + 1}.jpg) no-repeat center top fixed / 100% 100%`)\r\n\r\n    document.querySelector('.box').setAttribute('style', `background: url(../../assets/background-box-0${bgSlider[home][box]} / cover`)\r\n  }\r\n\r\n  errorAlert = (err) => {\r\n    this.setState({ planet: false })\r\n\r\n    console.log('planet', this.state.planet)\r\n    console.log('Erro:', err)\r\n\r\n    document.querySelector('#nprogress .bar').style.backgroundColor = '#f00'\r\n    NProgress.done()\r\n  }\r\n\r\n  randomPage = async () => {\r\n    try {\r\n      const response = await api.get('/planets')\r\n\r\n      const pages = response.data.pages\r\n      const page = Math.floor(Math.random() * (pages - 1 + 1) + 1)\r\n\r\n      this.setState({ page })\r\n\r\n      this.loadPlanets()\r\n    } catch (err) {\r\n      this.errorAlert(err)\r\n    }\r\n  }\r\n\r\n  loadPlanets = async () => {\r\n    try {\r\n      const response = await api.get(`/planets?page=${this.state.page}`)\r\n\r\n      this.setState({ planets: response.data.docs })\r\n\r\n      document.querySelector('#nprogress .bar').style.backgroundColor = '#fff'\r\n      NProgress.done()\r\n\r\n      this.randomPlanet()\r\n    } catch (err) {\r\n      this.errorAlert(err)\r\n    }\r\n  }\r\n\r\n  randomPlanet = () => {\r\n    const random = Math.floor(Math.random() * this.state.planets.length)\r\n    this.setState({ planet: this.state.planets[random] })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <Home planet={this.state.planet} />\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\n\nimport Header from './components/Header/Header'\nimport HomeContainer from './pages/Home/HomeContainer'\n\nimport './styles.css'\n\nconst App = () => (\n  <div className='App'>\n    <Header />\n    <HomeContainer />\n  </div>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nserviceWorker.register()\n"],"sourceRoot":""}